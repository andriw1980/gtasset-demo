import React, { useState, useEffect } from 'react';
import { useAuth } from '../contexts/AuthContext';
import Layout from '../components/Layout';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Badge } from '@/components/ui/badge';
import { Trash2, Edit, Save, X, Plus } from 'lucide-react';
import { supabase } from '@/integrations/supabase/client';
import { useForm } from 'react-hook-form';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';

interface Asset {
  id: string;
  asset_code: string;
  name: string;
  category_id: string | null;
  serial_number: string | null;
  purchase_date: string;
  purchase_price: number;
  vendor: string | null;
  location_id: string | null;
  assigned_to: string | null;
  description: string | null;
  status: string | null;
  created_at: string;
  updated_at: string;
  category: { name: string } | null;
  location: { name: string } | null;
}

interface Category {
  id: string;
  name: string;
}

interface WorkArea {
  id: string;
  name: string;
}

interface AssetFormData {
  name: string;
  category_id: string;
  serial_number: string;
  purchase_date: string;
  purchase_price: number;
  vendor: string;
  location_id: string;
  assigned_to: string;
  description: string;
  status: string;
}

const Assets = () => {
  const { user } = useAuth();
  const [assets, setAssets] = useState<Asset[]>([]);
  const [categories, setCategories] = useState<Category[]>([]);
  const [workAreas, setWorkAreas] = useState<WorkArea[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [message, setMessage] = useState('');
  const [editingAsset, setEditingAsset] = useState<Asset | null>(null);
  const [showForm, setShowForm] = useState(false);

  const { register, handleSubmit, reset, setValue, watch } = useForm<AssetFormData>();

  const isAdmin = user?.role === 'admin' || user?.role === 'staff';

  useEffect(() => {
    fetchAssets();
    fetchCategories();
    fetchWorkAreas();
  }, []);

  const fetchAssets = async () => {
    setIsLoading(true);
    try {
      const { data, error } = await supabase
        .from('assets')
        .select(`
          *,
          category:asset_categories(name),
          location:work_areas(name)
        `)
        .order('created_at', { ascending: false });

      if (error) throw error;
      setAssets(data || []);
    } catch (error: any) {
      setMessage(`Error fetching assets: ${error.message}`);
    }
    setIsLoading(false);
  };

  const fetchCategories = async () => {
    try {
      const { data, error } = await supabase
        .from('asset_categories')
        .select('*')
        .order('name');

      if (error) throw error;
      setCategories(data || []);
    } catch (error: any) {
      console.error('Error fetching categories:', error);
    }
  };

  const fetchWorkAreas = async () => {
    try {
      const { data, error } = await supabase
        .from('work_areas')
        .select('*')
        .order('name');

      if (error) throw error;
      setWorkAreas(data || []);
    } catch (error: any) {
      console.error('Error fetching work areas:', error);
    }
  };

  const handleSave = async (data: AssetFormData) => {
    if (!isAdmin) {
      setMessage('Only admins and staff can modify assets');
      return;
    }

    setIsLoading(true);
    try {
      const assetData = {
        name: data.name,
        category_id: data.category_id || null,
        serial_number: data.serial_number || null,
        purchase_date: data.purchase_date,
        purchase_price: Number(data.purchase_price),
        vendor: data.vendor || null,
        location_id: data.location_id || null,
        assigned_to: data.assigned_to || null,
        description: data.description || null,
        status: data.status || 'Aktif'
      };

      if (editingAsset) {
        const { error } = await supabase
          .from('assets')
          .update({
            ...assetData,
            updated_at: new Date().toISOString()
          })
          .eq('id', editingAsset.id);

        if (error) throw error;
        setMessage('Asset updated successfully');
      } else {
        // For new assets, don't include asset_code - it will be auto-generated by the trigger
        const { error } = await supabase
          .from('assets')
          .insert(assetData);

        if (error) throw error;
        setMessage('Asset created successfully');
      }

      reset();
      setEditingAsset(null);
      setShowForm(false);
      fetchAssets();
    } catch (error: any) {
      setMessage(`Error: ${error.message}`);
    }
    setIsLoading(false);
  };

  const handleDelete = async (id: string) => {
    if (!isAdmin) {
      setMessage('Only admins can delete assets');
      return;
    }

    if (!confirm('Are you sure you want to delete this asset?')) return;

    setIsLoading(true);
    try {
      const { error } = await supabase
        .from('assets')
        .delete()
        .eq('id', id);

      if (error) throw error;
      setMessage('Asset deleted successfully');
      fetchAssets();
    } catch (error: any) {
      setMessage(`Error: ${error.message}`);
    }
    setIsLoading(false);
  };

  const startEdit = (asset: Asset) => {
    setEditingAsset(asset);
    setValue('name', asset.name);
    setValue('category_id', asset.category_id || '');
    setValue('serial_number', asset.serial_number || '');
    setValue('purchase_date', asset.purchase_date);
    setValue('purchase_price', asset.purchase_price);
    setValue('vendor', asset.vendor || '');
    setValue('location_id', asset.location_id || '');
    setValue('assigned_to', asset.assigned_to || '');
    setValue('description', asset.description || '');
    setValue('status', asset.status || 'Aktif');
    setShowForm(true);
  };

  const cancelEdit = () => {
    setEditingAsset(null);
    setShowForm(false);
    reset();
  };

  const formatPrice = (price: number) => {
    return new Intl.NumberFormat('id-ID', {
      style: 'currency',
      currency: 'IDR'
    }).format(price);
  };

  if (!user) return null;

  return (
    <Layout>
      <div className="space-y-6">
        <div className="flex justify-between items-center">
          <h1 className="text-3xl font-bold">Assets</h1>
          {isAdmin && (
            <Button onClick={() => setShowForm(true)} className="flex items-center space-x-2">
              <Plus className="h-4 w-4" />
              <span>Add Asset</span>
            </Button>
          )}
        </div>

        {message && (
          <Alert variant={message.includes('Error') ? 'destructive' : 'default'}>
            <AlertDescription>{message}</AlertDescription>
          </Alert>
        )}

        {/* Asset Form */}
        {showForm && (
          <Card>
            <CardHeader>
              <CardTitle>
                {editingAsset ? 'Edit Asset' : 'Add New Asset'}
              </CardTitle>
            </CardHeader>
            <CardContent>
              <form onSubmit={handleSubmit(handleSave)} className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  <div>
                    <Label htmlFor="name">Asset Name *</Label>
                    <Input
                      id="name"
                      {...register('name', { required: true })}
                      placeholder="Enter asset name"
                    />
                  </div>
                  
                  <div>
                    <Label htmlFor="category">Category</Label>
                    <Select onValueChange={(value) => setValue('category_id', value)} value={watch('category_id')}>
                      <SelectTrigger>
                        <SelectValue placeholder="Select category" />
                      </SelectTrigger>
                      <SelectContent>
                        {categories.map((category) => (
                          <SelectItem key={category.id} value={category.id}>
                            {category.name}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>

                  <div>
                    <Label htmlFor="serial_number">Serial Number</Label>
                    <Input
                      id="serial_number"
                      {...register('serial_number')}
                      placeholder="Enter serial number"
                    />
                  </div>

                  <div>
                    <Label htmlFor="purchase_date">Purchase Date *</Label>
                    <Input
                      id="purchase_date"
                      type="date"
                      {...register('purchase_date', { required: true })}
                    />
                  </div>

                  <div>
                    <Label htmlFor="purchase_price">Purchase Price *</Label>
                    <Input
                      id="purchase_price"
                      type="number"
                      {...register('purchase_price', { required: true, valueAsNumber: true })}
                      placeholder="Enter purchase price"
                    />
                  </div>

                  <div>
                    <Label htmlFor="vendor">Vendor</Label>
                    <Input
                      id="vendor"
                      {...register('vendor')}
                      placeholder="Enter vendor name"
                    />
                  </div>

                  <div>
                    <Label htmlFor="location">Location</Label>
                    <Select onValueChange={(value) => setValue('location_id', value)} value={watch('location_id')}>
                      <SelectTrigger>
                        <SelectValue placeholder="Select location" />
                      </SelectTrigger>
                      <SelectContent>
                        {workAreas.map((area) => (
                          <SelectItem key={area.id} value={area.id}>
                            {area.name}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>

                  <div>
                    <Label htmlFor="assigned_to">Assigned To</Label>
                    <Input
                      id="assigned_to"
                      {...register('assigned_to')}
                      placeholder="Enter assignee name"
                    />
                  </div>

                  <div>
                    <Label htmlFor="status">Status</Label>
                    <Select onValueChange={(value) => setValue('status', value)} value={watch('status')} defaultValue="Aktif">
                      <SelectTrigger>
                        <SelectValue placeholder="Select status" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="Aktif">Aktif</SelectItem>
                        <SelectItem value="Maintenance">Maintenance</SelectItem>
                        <SelectItem value="Pensiun">Pensiun</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>

                <div>
                  <Label htmlFor="description">Description</Label>
                  <Textarea
                    id="description"
                    {...register('description')}
                    placeholder="Enter asset description"
                    rows={3}
                  />
                </div>

                <div className="flex space-x-2">
                  <Button type="submit" disabled={isLoading}>
                    <Save className="h-4 w-4 mr-2" />
                    {editingAsset ? 'Update' : 'Create'}
                  </Button>
                  <Button type="button" variant="outline" onClick={cancelEdit}>
                    <X className="h-4 w-4 mr-2" />
                    Cancel
                  </Button>
                </div>
              </form>
            </CardContent>
          </Card>
        )}

        {/* Assets List */}
        <Card>
          <CardHeader>
            <CardTitle>Assets List</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {assets.map((asset) => (
                <div key={asset.id} className="border rounded-lg p-4">
                  <div className="flex items-start justify-between">
                    <div className="flex-1 space-y-2">
                      <div className="flex items-center space-x-3">
                        <h3 className="font-semibold text-lg">{asset.name}</h3>
                        <Badge variant="outline">{asset.asset_code}</Badge>
                        <Badge variant={asset.status === 'Aktif' ? 'default' : asset.status === 'Maintenance' ? 'destructive' : 'secondary'}>
                          {asset.status}
                        </Badge>
                      </div>
                      
                      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 text-sm">
                        <div>
                          <span className="font-medium">Category:</span> {asset.category?.name || 'N/A'}
                        </div>
                        <div>
                          <span className="font-medium">Serial:</span> {asset.serial_number || 'N/A'}
                        </div>
                        <div>
                          <span className="font-medium">Purchase Date:</span> {new Date(asset.purchase_date).toLocaleDateString()}
                        </div>
                        <div>
                          <span className="font-medium">Price:</span> {formatPrice(asset.purchase_price)}
                        </div>
                        <div>
                          <span className="font-medium">Vendor:</span> {asset.vendor || 'N/A'}
                        </div>
                        <div>
                          <span className="font-medium">Location:</span> {asset.location?.name || 'N/A'}
                        </div>
                        {asset.assigned_to && (
                          <div>
                            <span className="font-medium">Assigned To:</span> {asset.assigned_to}
                          </div>
                        )}
                      </div>
                      
                      {asset.description && (
                        <div className="text-sm text-muted-foreground">
                          <span className="font-medium">Description:</span> {asset.description}
                        </div>
                      )}
                    </div>
                    
                    {isAdmin && (
                      <div className="flex space-x-2 ml-4">
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => startEdit(asset)}
                        >
                          <Edit className="h-4 w-4" />
                        </Button>
                        <Button
                          variant="destructive"
                          size="sm"
                          onClick={() => handleDelete(asset.id)}
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      </div>
                    )}
                  </div>
                </div>
              ))}
              
              {assets.length === 0 && !isLoading && (
                <div className="text-center py-8 text-muted-foreground">
                  No assets found. {isAdmin && 'Click "Add Asset" to create your first asset.'}
                </div>
              )}
            </div>
          </CardContent>
        </Card>

        {isLoading && (
          <div className="text-center py-4">
            <p>Loading...</p>
          </div>
        )}
      </div>
    </Layout>
  );
};

export default Assets;
